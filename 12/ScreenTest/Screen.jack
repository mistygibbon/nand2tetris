// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array screen;
    static Array bitArr;
    static int begin, end;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        var int n;
        var int accumulator;

        let color = true;
        let begin = 16384;
        let end = 24576;
        let n = 16;
        let i = 0;
        let accumulator = 1;
        let screen = begin;
        let bitArr = Array.new(16);

        while (i<n){
            let bitArr[i] = accumulator;
            let i = i+1;
            let accumulator = accumulator+accumulator;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while ((begin+i)<end){
            let screen[i] = 0;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int wordAddr;
        var int bit;

        if ((x>511)|(x<0)|(y>255)|(y<0)){
            return;
        }

        let wordAddr = (32*y)+(x/16);
        let bit = x - (16 * (x/16));

        if (color){ // black
            let screen[wordAddr] = screen[wordAddr] | bitArr[bit];
        } else { // white
            let screen[wordAddr] = screen[wordAddr] & ~bitArr[bit];
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int a,b;
        var int compareVar;
        let dx = x2-x1;
        let dy = y2-y1;
        let a = 0;
        let b = 0;
        let compareVar = 0;
        if (dy = 0){
            if (dx >0){
                while ((x1+a)<(x2+1)){
                    do Screen.drawPixel(x1+a,y1);
                    let a = a + 1;
                }
            } else {
                while ((x1+a)>(x2-1)){
                    do Screen.drawPixel(x1+a,y1);
                    let a = a - 1;
                }
            }
            return;
        }

        if (dx = 0){
            if (dy >0){
                while ((y1+b)<(y2+1)){
                    do Screen.drawPixel(x1,y1+b);
                    let b = b + 1;
                }
            } else {
                while ((y1+b)>(y2-1)){
                    do Screen.drawPixel(x1,y1+b);
                    let b = b - 1;
                }
            }
            return;
        }

        if ((dx>0)&(dy>0)){

            do Screen.drawPixel(x1,y1);
            if (dy>dx){
                let b = b + 1;
                let compareVar = compareVar - dx;
                do Screen.drawPixel(x1,y1+b);
            } else {
                let a = a + 1;
                let compareVar = compareVar + dy;
                do Screen.drawPixel(x1+a,y1);
            }

            while (~((x1+a)=x2)&~((y1+b)=y2)){
                if (compareVar < 0){
                    let a = a + 1;
                    let compareVar = compareVar + dy;
                    do Screen.drawPixel(x1+a,y1+b);
                } else {
                    let b = b + 1;
                    let compareVar = compareVar - dx;
                    do Screen.drawPixel(x1+a,y1+b);
                }
            }

            do Screen.drawPixel(x2,y2);
            return;
        }

        if ((dx<0)&(dy<0)){

            do Screen.drawPixel(x1,y1);
            if (dy<dx){
                let b = b - 1;
                let compareVar = compareVar + dx;
                do Screen.drawPixel(x1,y1+b);
            } else {
                let a = a - 1;
                let compareVar = compareVar - dy;
                do Screen.drawPixel(x1+a,y1);
            }

            while (~((x1+a)=x2)&~((y1+b)=y2)){
                if (compareVar < 0){
                    let a = a - 1;
                    let compareVar = compareVar - dy;
                    do Screen.drawPixel(x1+a,y1+b);
                } else {
                    let b = b - 1;
                    let compareVar = compareVar + dx;
                    do Screen.drawPixel(x1+a,y1+b);
                }
            }

            do Screen.drawPixel(x2,y2);
            return;
        }

        if ((dx>0)&(dy<0)){

            do Screen.drawPixel(x1,y1);
            if (Math.abs(dy)<Math.abs(dx)){
                let b = b - 1;
                let compareVar = compareVar + dx;
                do Screen.drawPixel(x1,y1+b);
            } else {
                let a = a + 1;
                let compareVar = compareVar + dy;
                do Screen.drawPixel(x1+a,y1);
            }

            while (~((x1+a)=x2)&~((y1+b)=y2)){
                if (compareVar > 0){
                    let a = a + 1;
                    let compareVar = compareVar + dy;
                    do Screen.drawPixel(x1+a,y1+b);
                } else {
                    let b = b - 1;
                    let compareVar = compareVar + dx;
                    do Screen.drawPixel(x1+a,y1+b);
                }
            }

            do Screen.drawPixel(x2,y2);
            return;
        }

        if ((dx<0)&(dy>0)){

            do Screen.drawPixel(x1,y1);
            if (Math.abs(dy)<Math.abs(dx)){
                let b = b + 1;
                let compareVar = compareVar - dx;
                do Screen.drawPixel(x1,y1+b);
            } else {
                let a = a - 1;
                let compareVar = compareVar - dy;
                do Screen.drawPixel(x1+a,y1);
            }

            while (~((x1+a)=x2)&~((y1+b)=y2)){
                if (compareVar > 0){
                    let a = a - 1;
                    let compareVar = compareVar - dy;
                    do Screen.drawPixel(x1+a,y1+b);
                } else {
                    let b = b + 1;
                    let compareVar = compareVar - dx;
                    do Screen.drawPixel(x1+a,y1+b);
                }
            }

            do Screen.drawPixel(x2,y2);
            return;
        }


        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i,c, dy;
        let c = y1-y2-1;
        let dy = y2-y1;
        if (dy>0){
            while (c<0){
                do Screen.drawLine(x1,y1+i,x2,y1+i);
                let i = i + 1;
                let c = c + 1;
            }
            return;
        } else {
            while (c>0){
                do Screen.drawLine(x1,y1+i,x2,y1+i);
                let i = i - 1;
                let c = c - 1;
            }
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int halfChord;
        var int r2;
        let dy = -r;
        let r2 = r*r;
        while (dy<(r+1)){
            let halfChord = Math.sqrt((r2)-(dy*dy));
            do Screen.drawLine(x-halfChord,y+dy,x+halfChord,y+dy);
            let dy = dy+1;
        }
        return;
    }
}

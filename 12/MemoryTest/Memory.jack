// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;
    static Array heap;
    static Array NO_BLOCK;

    // block structure
    // 1 pointer to other block (0 for allocated ram or final block in freeList)
    // 2 size of block
    // 3-inf data

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let freeList[0] = 0;
        let freeList[1] = 14334; // 2049+14334=16383
        let NO_BLOCK = 16384;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array list;
        var int blockSize;
        var int excess;
        var Array returnBlock;
        let list = freeList;
        let blockSize = list[1];
        while (blockSize<(size+2)){ // while current block size to too small (first fit)
            let list = list[0];
            if (list = 0){ // end of list
                // do defrag(); // defrag optional
                // return alloc(size);
                return -1; // memory cannot be allocated
            }
            let blockSize = list[1];
        }
        let excess = blockSize - (size + 2);
        let list[1] = excess;
        let returnBlock = list + 2 + excess;
        let returnBlock[0] = 0;
        let returnBlock[1] = size;
        return returnBlock + 2;
    }

    // function void defrag(){
    //     var Array list;
    //     var int blockSize;
    //     var int next;
    //     var int nextSize;
    //     let list = freeList;
    //     while (~(list[0]=0)){
    //         let next = list[0];
    //         let blockSize = list[1];
    //         if ((list + blockSize + 2) = next){
    //             let nextSize =
    //         }
    //         let list = list[0];
    //     }
    // }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array list;
        var Array nextList;
        let list = freeList;
        let nextList = freeList[0];
        while (nextList<o){
            if (nextList = 0){
                let list[0] = o-2;
                return;
            }
            let list = nextList;
            let nextList = nextList[0];
        }

        let list[0] = o-2;
        let ram[o-2] = nextList;
        return;
    }    
}

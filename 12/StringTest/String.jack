// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int maxL;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0){
            let maxLength = 1; // allow zero length string
        }
        let str = Array.new(maxLength);
        let maxL = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        var int index;
        var char val;
        if (j>(length-1)){
            let index = length-1;
        } else {
            let index = j;
        }
        let val = str[index];
        return val;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        var int index;
        if (j>(length-1)){
            let index = length-1;
        } else {
            let index = j;
        }
        let str[index] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = maxL){
            return this;
        }
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0){
            return;
        }
        let str[length-1] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v,i,d;
        var boolean negative;
        let v = 0;
        let i = 0;
        let negative = false;

        if (str[i]=45){
            let negative = true;
            let i = 1;
        }

        while (i<length){
            let d = str[i];

            if ((d<48)|(d>57)){
                if(negative){
                    return -v;
                } else {
                    return v;
                }
            }

            let v = (v*10)+(d-48);
            let i = i+1;
        }

        if (negative){
            return -v;
        }

        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var int c;
        var int absVal;
        var boolean negative;
        let negative = false;
        let absVal = Math.abs(val);

        if (val<0){
            let negative = true;
        }

        do eraseString();

        if (negative){
            do appendChar(45);
        }

        let lastDigit = absVal - ((absVal/10)*10);
        let c = lastDigit + 48;
        if (absVal<10){
            do appendChar(c);
        } else {
            do nextSetInt(absVal/10);
            do appendChar(c);
        }
        return;
    }

    method void nextSetInt(int val) {
        var int lastDigit;
        var int c;
        if (val<0){
            return;
        }
        let lastDigit = val - ((val/10)*10);
        let c = lastDigit + 48;
        if (val<10){
            do appendChar(c);
        } else {
            do nextSetInt(val/10);
            do appendChar(c);
        }
        return;
    }

    method void eraseString(){
        while (~(length=0)){
            do eraseLastChar();
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128; // 10?
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129; // 8?
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

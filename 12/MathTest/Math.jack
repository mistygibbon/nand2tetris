// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        var int accumulator;
        let twoToThe = Array.new(16);
        let i = 0;
        let accumulator = 1;
        while (i<16){
            let twoToThe[i] = accumulator;
            let i = i + 1;
            let accumulator = accumulator+accumulator;
        }
        return;
    }

    function boolean bit(int x, int j){
        if ((x&twoToThe[j]) = twoToThe[j]){
            return true;
        } else {
            return false;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x<0){
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int j;
        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while (j<16){
            if (Math.bit(y,j)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int absx, absy;
        var bool sign;
        var int ans;
        let sign = true;
        if (x<0){
            let sign = ~sign;

        }

        if (y<0){
            let sign = ~sign;
        }

        let absx = Math.abs(x);
        let absy = Math.abs(y);

        if ((absy>absx) | (absy<0)){
            return 0;
        }
        let q = Math.divide(absx,absy+absy);
        if ((absx-(2*q*absy))<absy){
            let ans = q+q;
        } else {
            let ans = q+q+1;
        }
        if (sign){
            return ans;
        } else {
            return -ans;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        let y = 0;
        let j = (16/2)-1;
        while (j>-1){
            if (~((y+twoToThe[j])*(y+twoToThe[j])>x) & ((y+twoToThe[j])*(y+twoToThe[j])>0)){
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a>b){
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a<b){
            return a;
        } else {
            return b;
        }
    }
}
